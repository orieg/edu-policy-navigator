#!/bin/sh

# Commit message hook to enforce commit message guidelines
# Based on the guidelines in .cursor/rules/01-commit-message.mdc

# Get the commit message file
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Define valid types from our guidelines
VALID_TYPES="feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print the error message and guidelines
print_error_and_guidelines() {
    echo "${RED}❌ Commit message format is incorrect.${NC}"
    echo "${YELLOW}Your commit message:${NC}"
    echo "$COMMIT_MSG"
    echo ""
    echo "${YELLOW}Required format:${NC}"
    echo "type: short description"
    echo ""
    echo "Context:"
    echo "Clear description of what this change accomplishes or why it's needed."
    echo ""
    echo "Changes made:"
    echo "- Bullet point of specific change"
    echo "- Another specific change"
    echo ""
    echo "Impact:"
    echo "What this change accomplishes and why it matters."
    echo ""
    echo "${YELLOW}Valid types:${NC} feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert"
    echo ""
    echo "${YELLOW}For more details, see the commit message guidelines at:${NC}"
    echo ".cursor/rules/01-commit-message.mdc"
    echo ""
    exit 1
}

# Check if the commit message has a valid type prefix
if ! echo "$COMMIT_MSG" | grep -qE "^($VALID_TYPES): .+"; then
    echo "${RED}❌ Commit message must start with a valid type: ${NC}"
    echo "${YELLOW}$VALID_TYPES${NC}"
    print_error_and_guidelines
fi

# Check for a short description (at least 10 characters)
FIRST_LINE=$(echo "$COMMIT_MSG" | head -n 1)
if [ ${#FIRST_LINE} -lt 10 ]; then
    echo "${RED}❌ Commit message first line (type: short description) is too short.${NC}"
    echo "${YELLOW}It should provide a meaningful description of the change.${NC}"
    print_error_and_guidelines
fi

# Check for a blank line after the first line
SECOND_LINE=$(echo "$COMMIT_MSG" | sed -n '2p')
if [ -n "$SECOND_LINE" ]; then
    echo "${RED}❌ There must be a blank line after the first line.${NC}"
    print_error_and_guidelines
fi

# Check if the required sections exist
if ! echo "$COMMIT_MSG" | grep -q "Context:"; then
    echo "${RED}❌ Commit message should include a 'Context:' section.${NC}"
    print_error_and_guidelines
fi

if ! echo "$COMMIT_MSG" | grep -q "Changes made:"; then
    echo "${RED}❌ Commit message should include a 'Changes made:' section.${NC}"
    print_error_and_guidelines
fi

if ! echo "$COMMIT_MSG" | grep -q "Impact:"; then
    echo "${RED}❌ Commit message should include an 'Impact:' section.${NC}"
    print_error_and_guidelines
fi

# Simplified check for a detailed description (minimum line count)
LINE_COUNT=$(echo "$COMMIT_MSG" | wc -l | tr -d ' ')
if [ "$LINE_COUNT" -lt 6 ]; then
    echo "${RED}❌ Commit message should include a detailed description.${NC}"
    echo "${YELLOW}Please provide Context, Changes made, and Impact sections.${NC}"
    print_error_and_guidelines
fi

echo "${GREEN}✅ Commit message format validated successfully.${NC}"
exit 0 