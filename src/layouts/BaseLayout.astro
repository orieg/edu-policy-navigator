---
// src/layouts/BaseLayout.astro
// console.log("BaseLayout Astro.props:", Astro.props);
import "../styles/global.css";
// Import Leaflet CSS from node_modules
import "leaflet/dist/leaflet.css";

// Import MarkerCluster CSS from node_modules
import "leaflet.markercluster/dist/MarkerCluster.css";
import "leaflet.markercluster/dist/MarkerCluster.Default.css";
import { WEBSITE_NAME, WEBSITE_DESCRIPTION } from "../siteConfig"; // Import site constants
import TableOfContents from "../components/TableOfContents.astro"; // Import the new TOC component

export interface Props {
    frontmatter?: {
        // Make frontmatter itself optional
        title?: string;
        description?: string;
        breadcrumbs?: { text: string; href?: string }[];
    };
    // Direct props for .astro pages
    title?: string;
    description?: string;
    breadcrumbs?: { text: string; href?: string }[];
    headings?: { depth: number; slug: string; text: string }[];
}

const props = Astro.props;

// Determine if props are coming from Markdown frontmatter or direct .astro props
const source = props.frontmatter || props; // Use frontmatter if it exists, otherwise use props directly

const title = source.title || WEBSITE_NAME;
const description = source.description || WEBSITE_DESCRIPTION;
const breadcrumbs = source.breadcrumbs;
const headings = props.headings; // headings are always top-level from Astro.props for MD
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content={description} />
        <title>{title}</title>
    </head>
    <body>
        <header>
            <h1><a href="/">{title}</a></h1>
            {
                breadcrumbs && breadcrumbs.length > 0 && (
                    <nav aria-label="breadcrumb" class="breadcrumbs">
                        <ol>
                            {breadcrumbs.map((crumb, index) => (
                                <li
                                    aria-current={
                                        index === breadcrumbs.length - 1
                                            ? "page"
                                            : undefined
                                    }
                                >
                                    {crumb.href &&
                                    index < breadcrumbs.length - 1 ? (
                                        <a href={crumb.href}>{crumb.text}</a>
                                    ) : (
                                        crumb.text
                                    )}
                                </li>
                            ))}
                        </ol>
                    </nav>
                )
            }
        </header>
        <div class="disclaimer">
            <strong>Disclaimer:</strong> Data is based on publicly available sources
            from the CDE and other agencies. Policy information is synthesized and
            may require verification against official documents.
        </div>
        <main id="page-view">
            {
                /* Render TOC if headings are present (typically for Markdown pages) */
            }
            {
                headings && headings.length > 0 && (
                    <TableOfContents headings={headings} />
                )
            }
            <slot />
            <!-- Page content goes here -->
        </main>
        <footer>
            <p>
                &copy; {new Date().getFullYear()}
                {WEBSITE_NAME}. All rights reserved.
            </p>
        </footer>
        <script is:inline>
            document.addEventListener("DOMContentLoaded", () => {
                const allTocs = document.querySelectorAll("nav.toc");
                const mobileBreakpoint = 768; // Same as CSS media query

                allTocs.forEach((toc) => {
                    const toggleButton = toc.querySelector(".toc-toggle");
                    const listToToggle = toc.querySelector(".toc-list"); // Should be .toc-list now

                    if (toggleButton && listToToggle) {
                        // Check initial screen width
                        const isMobile = window.innerWidth < mobileBreakpoint;

                        if (isMobile) {
                            toc.classList.add("is-collapsed");
                            toggleButton.setAttribute("aria-expanded", "false");
                        } else {
                            // On desktop, ensure it respects HTML or is expanded
                            // If HTML is aria-expanded="true", it will be expanded.
                            // If we want to force expand on desktop load, uncomment below:
                            // toc.classList.remove('is-collapsed');
                            // toggleButton.setAttribute('aria-expanded', 'true');
                        }

                        toggleButton.addEventListener("click", () => {
                            const isExpanded =
                                toggleButton.getAttribute("aria-expanded") ===
                                "true";
                            toggleButton.setAttribute(
                                "aria-expanded",
                                String(!isExpanded),
                            );
                            toc.classList.toggle("is-collapsed");
                        });
                    }
                });
            });
        </script>
    </body>
</html>
