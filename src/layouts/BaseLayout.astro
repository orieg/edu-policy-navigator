---
// src/layouts/BaseLayout.astro
// console.log("BaseLayout Astro.props:", Astro.props);
import "../styles/global.css";
// Import Leaflet CSS from node_modules
import "leaflet/dist/leaflet.css";

// Import MarkerCluster CSS from node_modules
import "leaflet.markercluster/dist/MarkerCluster.css";
import "leaflet.markercluster/dist/MarkerCluster.Default.css";
import { WEBSITE_NAME, WEBSITE_DESCRIPTION } from "../siteConfig"; // Import site constants
import TableOfContents from "../components/TableOfContents.astro"; // Import the new TOC component

export interface Props {
    frontmatter?: {
        // Make frontmatter itself optional
        title?: string;
        description?: string;
        breadcrumbs?: { text: string; href?: string }[];
    };
    // Direct props for .astro pages
    title?: string;
    description?: string;
    breadcrumbs?: { text: string; href?: string }[];
    headings?: { depth: number; slug: string; text: string }[];
}

const props = Astro.props;

// Determine if props are coming from Markdown frontmatter or direct .astro props
const source = props.frontmatter || props; // Use frontmatter if it exists, otherwise use props directly

const title = source.title || WEBSITE_NAME;
const description = source.description || WEBSITE_DESCRIPTION;
const breadcrumbs = source.breadcrumbs;
const headings = props.headings; // headings are always top-level from Astro.props for MD

const showSiteBrand = title !== WEBSITE_NAME; // Condition to show site brand

const lastUpdatedDate = new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
});

// Use the specific page title for the HTML document title, but site name for header <h1>
const documentTitle = source.title || WEBSITE_NAME;
---

<!doctype html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta
            name="description"
            content={source.description || WEBSITE_DESCRIPTION}
        />
        <title>{title}</title>
        {/* Use specific page title here */}
    </head>
    <body>
        <header>
            {
                showSiteBrand ? (
                    <div class="site-brand">
                        <a
                            href={import.meta.env.BASE_URL}
                            class="site-name-link"
                        >
                            {WEBSITE_NAME}
                        </a>
                    </div>
                ) : (
                    <div class="site-brand-placeholder" />
                )
            }
            <h1>{title}</h1>
            {/* This is the page-specific title */}
            {
                breadcrumbs && breadcrumbs.length > 0 && (
                    <nav aria-label="breadcrumb" class="breadcrumbs">
                        <ol>
                            {breadcrumbs.map((crumb, index) => (
                                <li
                                    aria-current={
                                        index === breadcrumbs.length - 1
                                            ? "page"
                                            : undefined
                                    }
                                >
                                    {crumb.href &&
                                    index < breadcrumbs.length - 1
                                        ? (() => {
                                              let finalHref = crumb.href;
                                              const base = import.meta.env
                                                  .BASE_URL;
                                              if (
                                                  crumb.href.startsWith("/") &&
                                                  !crumb.href.startsWith(
                                                      "//",
                                                  ) &&
                                                  base &&
                                                  base !== "/"
                                              ) {
                                                  const normBase =
                                                      base.endsWith("/")
                                                          ? base
                                                          : base + "/";
                                                  if (crumb.href === "/") {
                                                      finalHref = normBase;
                                                  } else {
                                                      finalHref =
                                                          normBase +
                                                          (crumb.href.startsWith(
                                                              "/",
                                                          )
                                                              ? crumb.href.substring(
                                                                    1,
                                                                )
                                                              : crumb.href);
                                                  }
                                              }
                                              return (
                                                  <a href={finalHref}>
                                                      {crumb.text}
                                                  </a>
                                              );
                                          })()
                                        : crumb.text}
                                </li>
                            ))}
                        </ol>
                    </nav>
                )
            }
        </header>
        <div class="disclaimer">
            <strong>Disclaimer:</strong> Data is based on publicly available sources
            from the CDE and other agencies. Policy information is synthesized and
            may require verification against official documents.
        </div>
        <main id="page-view">
            {
                /* Render TOC if headings are present (typically for Markdown pages) */
            }
            {
                headings && headings.length > 0 && (
                    <TableOfContents headings={headings} />
                )
            }
            <slot />
            <!-- Page content goes here -->
        </main>
        <footer>
            <p>
                &copy; {new Date().getFullYear()}
                {WEBSITE_NAME}. All rights reserved.
            </p>
            <p class="footer-links">
                <a
                    href="https://github.com/orieg/edu-policy-navigator"
                    target="_blank"
                    rel="noopener noreferrer"
                    ><svg
                        class="footer-gh-icon"
                        viewBox="0 0 16 16"
                        version="1.1"
                        width="16"
                        height="16"
                        aria-hidden="true"
                        ><path
                            fill-rule="evenodd"
                            d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21-.15.46-.55.38A8.013 8.013 0 010 8z"
                        ></path></svg
                    >
                    GitHub Repository</a
                >
                &nbsp;|&nbsp;
                <a href={`${import.meta.env.BASE_URL}attributions`}
                    >Data Sources & Attributions</a
                >
            </p>
            <p class="footer-last-updated">
                Last updated on: {lastUpdatedDate}
            </p>
        </footer>
        <script is:inline>
            document.addEventListener("DOMContentLoaded", () => {
                const allTocs = document.querySelectorAll("nav.toc");
                const mobileBreakpoint = 768; // Same as CSS media query

                allTocs.forEach((toc) => {
                    const toggleButton = toc.querySelector(".toc-toggle");
                    const listToToggle = toc.querySelector(".toc-list"); // Should be .toc-list now

                    if (toggleButton && listToToggle) {
                        // Check initial screen width
                        const isMobile = window.innerWidth < mobileBreakpoint;

                        if (isMobile) {
                            toc.classList.add("is-collapsed");
                            toggleButton.setAttribute("aria-expanded", "false");
                        } else {
                            // On desktop, ensure it respects HTML or is expanded
                            // If HTML is aria-expanded="true", it will be expanded.
                            // If we want to force expand on desktop load, uncomment below:
                            // toc.classList.remove('is-collapsed');
                            // toggleButton.setAttribute('aria-expanded', 'true');
                        }

                        toggleButton.addEventListener("click", () => {
                            const isExpanded =
                                toggleButton.getAttribute("aria-expanded") ===
                                "true";
                            toggleButton.setAttribute(
                                "aria-expanded",
                                String(!isExpanded),
                            );
                            toc.classList.toggle("is-collapsed");
                        });
                    }
                });
            });
        </script>
    </body>
</html>
