---
// src/pages/index.astro
import BaseLayout from "../layouts/BaseLayout.astro";
import GuideCard from "../components/GuideCard.astro"; // Import the new component

// Fetch initial data if needed (currently none needed for index based on old Vike structure)
const pageTitle = "Unofficial California Education Policies Navigator";
const pageDescription =
    "Explore California K-12 school district data and policies.";

const BASE_URL = import.meta.env.BASE_URL;

// Data for the guide cards - matches structure expected by GuideCard.astro
const homepageGuides = [
    {
        href: `${BASE_URL}guides/school-safety-respect-protocol`,
        title: "School Safety & Respect Protocol",
        description:
            "Questions to ask about safety, behavior, and school climate.",
        iconSvg:
            '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M11.46 20.846a12 12 0 0 1 -7.96 -14.846a12 12 0 0 0 8.5 -3a12 12 0 0 0 8.5 3a12 12 0 0 1 -.09 7.06"></path><path d="M15 19l2 2l4 -4"></path></svg>',
    },
    {
        href: `${BASE_URL}guides/academic-curriculum`,
        title: "Academic Quality & Curriculum",
        description:
            "Questions to ask about curriculum, teaching, and student learning.",
        iconSvg:
            '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0"></path><path d="M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0"></path><path d="M3 6l0 13"></path><path d="M12 6l0 13"></path><path d="M21 6l0 13"></path></svg>',
    },
];
---

<BaseLayout title={pageTitle} description={pageDescription}>
    <h2>California Education Hub: Policies, Data & Parent Guides</h2>

    <div class="guides-container">
        {homepageGuides.map((guide) => <GuideCard {...guide} />)}
    </div>

    <div class="search-container">
        <input
            type="search"
            id="district-search"
            placeholder="Search districts..."
        />
        <ul id="search-results" hidden></ul>
    </div>
    <div id="info-display">
        <!-- District info will be loaded here or on district pages -->
    </div>
    <div id="map-container">
        <!-- Map might be initialized here or on district pages -->
        <div id="map">Loading Map...</div>
    </div>
</BaseLayout>

<style>
    /* Style the search container to position the results list */
    .search-container {
        position: relative; /* Needed for absolute positioning of children */
        margin-bottom: 1rem; /* Add some space below the search box */
    }

    /* Style the search input */
    #district-search {
        width: 100%;
        padding: 0.5rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    /* Style the search results list */
    #search-results {
        position: absolute;
        top: 100%; /* Position below the search input */
        left: 0;
        right: 0;
        background-color: white;
        border: 1px solid #ccc;
        border-top: none; /* Avoid double border with input */
        border-radius: 0 0 4px 4px;
        max-height: 200px; /* Limit height and add scroll if needed */
        overflow-y: auto;
        list-style: none;
        padding: 0;
        margin: 0;
        z-index: 10; /* Ensure it appears above other content */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add subtle shadow */
    }

    /* Style individual result items */
    #search-results li {
        padding: 0.5rem;
        cursor: pointer;
    }

    #search-results li:hover {
        background-color: #f0f0f0;
    }

    /* Hide the results list when the hidden attribute is present */
    #search-results[hidden] {
        display: none;
    }

    /* Basic map container styling */
    #map-container {
        margin-top: 1rem;
        position: relative; /* Establish stacking context */
        z-index: 0; /* Ensure it's below the search results */
    }
    #map {
        height: 400px; /* Example height */
        width: 100%;
        border: 1px solid #ccc;
    }

    /* Error message styling */
    .error {
        color: red;
        font-weight: bold;
    }

    /* Styles for the new guide cards ARE NOW IN global.css */
    /* .guides-container IS NOW IN global.css */
    /* .guide-card IS NOW IN global.css */
    /* .guide-card:hover IS NOW IN global.css */
    /* .guide-card h2 IS NOW IN global.css */
    /* .guide-icon IS NOW IN global.css */
    /* .guide-icon svg IS NOW IN global.css */
    /* .guide-card p IS NOW IN global.css */
</style>

<script>
    import { setupSearchHandlers } from "../scripts/search";
    import { initializeMap, addDistrictMarkersToMap } from "../scripts/map";
    import type {
        DistrictDataMap,
        SchoolsByDistrictMap,
    } from "../scripts/types";

    async function initializeSearch() {
        try {
            initializeMap("map"); // Initialize the map first
            console.log("Fetching data for search...");
            const baseUrl = import.meta.env.BASE_URL;
            const [districtsRes, schoolsRes] = await Promise.all([
                fetch(`${baseUrl}assets/districts.json`),
                fetch(`${baseUrl}assets/schools_by_district.json`),
            ]);

            if (!districtsRes.ok) {
                throw new Error(
                    `Failed to fetch districts: ${districtsRes.statusText}`,
                );
            }
            if (!schoolsRes.ok) {
                throw new Error(
                    `Failed to fetch schools: ${schoolsRes.statusText}`,
                );
            }

            const districtsData: DistrictDataMap = await districtsRes.json();
            const schoolsData: SchoolsByDistrictMap = await schoolsRes.json();
            console.log(
                "Data fetched, setting up search handlers and adding district markers...",
            );

            // Add district markers to the map AFTER data is fetched
            try {
                await addDistrictMarkersToMap("map", districtsData);
            } catch (error) {
                console.error("Failed to add district markers to map:", error);
                // Optionally show a non-blocking warning
            }

            setupSearchHandlers(
                "district-search",
                "search-results",
                districtsData,
                schoolsData,
                baseUrl,
            );
        } catch (error) {
            console.error("Failed to initialize search or map:", error);
            const infoDisplay = document.getElementById("info-display");
            if (infoDisplay) {
                infoDisplay.innerHTML = `<p class="error">Error loading district data. Please try refreshing the page.</p>`;
            }
            // Disable search input if data loading fails
            const searchInput = document.getElementById(
                "district-search",
            ) as HTMLInputElement;
            if (searchInput) {
                searchInput.disabled = true;
                searchInput.placeholder = "Data unavailable, search disabled.";
            }
        }
    }

    // Initialize map and search functionality when the DOM is ready
    if (document.readyState === "loading") {
        // Loading hasn't finished yet
        document.addEventListener("DOMContentLoaded", initializeSearch);
    } else {
        // `DOMContentLoaded` has already fired
        initializeSearch();
    }
</script>
