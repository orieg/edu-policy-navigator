---
// src/pages/index.astro
import BaseLayout from "../layouts/BaseLayout.astro";
// Fetch initial data if needed (currently none needed for index based on old Vike structure)
const pageTitle = "Unofficial California Education Policies Navigator";
const pageDescription =
    "Explore California K-12 school district data and policies.";
---

<BaseLayout title={pageTitle} description={pageDescription}>
    <h2>California Education Hub: Policies, Data & Parent Guides</h2>

    <div class="guides-container">
        <a href="/guides/school-safety-respect-protocol" class="guide-card">
            <h2>
                <span class="guide-icon">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        ><path stroke="none" d="M0 0h24v24H0z" fill="none"
                        ></path><path
                            d="M11.46 20.846a12 12 0 0 1 -7.96 -14.846a12 12 0 0 0 8.5 -3a12 12 0 0 0 8.5 3a12 12 0 0 1 -.09 7.06"
                        ></path><path d="M15 19l2 2l4 -4"></path></svg
                    >
                </span>
                School Safety & Respect Protocol
            </h2>
            <p>Questions to ask about safety, behavior, and school climate.</p>
        </a>
        <a href="/guides/academic-curriculum" class="guide-card">
            <h2>
                <span class="guide-icon">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="24"
                        height="24"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        ><path stroke="none" d="M0 0h24v24H0z" fill="none"
                        ></path><path d="M3 19a9 9 0 0 1 9 0a9 9 0 0 1 9 0"
                        ></path><path d="M3 6a9 9 0 0 1 9 0a9 9 0 0 1 9 0"
                        ></path><path d="M3 6l0 13"></path><path d="M12 6l0 13"
                        ></path><path d="M21 6l0 13"></path></svg
                    >
                </span>
                Academic Quality & Curriculum
            </h2>
            <p>
                Questions to ask about curriculum, teaching, and student
                learning.
            </p>
        </a>
    </div>

    <div class="search-container">
        <input
            type="search"
            id="district-search"
            placeholder="Search districts..."
        />
        <ul id="search-results" hidden></ul>
    </div>
    <div id="info-display">
        <!-- District info will be loaded here or on district pages -->
    </div>
    <div id="map-container">
        <!-- Map might be initialized here or on district pages -->
        <div id="map">Loading Map...</div>
    </div>
</BaseLayout>

<style>
    /* Style the search container to position the results list */
    .search-container {
        position: relative; /* Needed for absolute positioning of children */
        margin-bottom: 1rem; /* Add some space below the search box */
    }

    /* Style the search input */
    #district-search {
        width: 100%;
        padding: 0.5rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    /* Style the search results list */
    #search-results {
        position: absolute;
        top: 100%; /* Position below the search input */
        left: 0;
        right: 0;
        background-color: white;
        border: 1px solid #ccc;
        border-top: none; /* Avoid double border with input */
        border-radius: 0 0 4px 4px;
        max-height: 200px; /* Limit height and add scroll if needed */
        overflow-y: auto;
        list-style: none;
        padding: 0;
        margin: 0;
        z-index: 10; /* Ensure it appears above other content */
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add subtle shadow */
    }

    /* Style individual result items */
    #search-results li {
        padding: 0.5rem;
        cursor: pointer;
    }

    #search-results li:hover {
        background-color: #f0f0f0;
    }

    /* Hide the results list when the hidden attribute is present */
    #search-results[hidden] {
        display: none;
    }

    /* Basic map container styling */
    #map-container {
        margin-top: 1rem;
        position: relative; /* Establish stacking context */
        z-index: 0; /* Ensure it's below the search results */
    }
    #map {
        height: 400px; /* Example height */
        width: 100%;
        border: 1px solid #ccc;
    }

    /* Error message styling */
    .error {
        color: red;
        font-weight: bold;
    }

    /* Styles for the new guide cards */
    .guides-container {
        display: flex;
        gap: 1rem; /* Space between cards */
        margin-bottom: 2rem; /* Space below the container */
        flex-wrap: wrap; /* Allow cards to wrap on smaller screens */
    }

    .guide-card {
        flex: 1 1 300px; /* Flex properties for responsiveness */
        display: block;
        padding: 1.5rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        text-decoration: none;
        color: inherit;
        background-color: #f9f9f9;
        transition:
            transform 0.2s ease-in-out,
            box-shadow 0.2s ease-in-out;
        min-width: 0; /* Allow card to shrink below its content's min-width */
    }

    .guide-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .guide-card h2 {
        margin-top: 0;
        font-size: 1.35rem;
        color: #0056b3;
        display: flex;
        align-items: center;
        overflow-wrap: break-word; /* Allow long words in titles to wrap */
        word-break: break-word; /* More aggressive word breaking if needed */
    }

    .guide-icon {
        margin-right: 0.5em;
        /* Styling for SVG icons */
        width: 1.5em; /* Control size of SVG */
        height: 1.5em; /* Control size of SVG */
        stroke-width: 2; /* Ensure stroke width is consistent if not set in SVG */
        color: #007bff; /* Example color - can be same as h2 or different */
    }

    .guide-icon svg {
        /* Ensure SVG fills the span */
        width: 100%;
        height: 100%;
    }

    .guide-card p {
        font-size: 0.9rem;
        color: #333;
        margin-bottom: 0; /* Remove default bottom margin if not needed */
    }
</style>

<script>
    import { setupSearchHandlers } from "../scripts/search";
    import { initializeMap, addDistrictMarkersToMap } from "../scripts/map";
    import type {
        DistrictDataMap,
        SchoolsByDistrictMap,
    } from "../scripts/types";

    async function initializeSearch() {
        try {
            console.log("Fetching data for search...");
            const [districtsRes, schoolsRes] = await Promise.all([
                fetch("/assets/districts.json"),
                fetch("/assets/schools_by_district.json"),
            ]);

            if (!districtsRes.ok) {
                throw new Error(
                    `Failed to fetch districts: ${districtsRes.statusText}`,
                );
            }
            if (!schoolsRes.ok) {
                throw new Error(
                    `Failed to fetch schools: ${schoolsRes.statusText}`,
                );
            }

            const districtsData: DistrictDataMap = await districtsRes.json();
            const schoolsData: SchoolsByDistrictMap = await schoolsRes.json();
            console.log(
                "Data fetched, setting up search handlers and adding district markers...",
            );

            // Add district markers to the map AFTER data is fetched
            try {
                await addDistrictMarkersToMap("map", districtsData);
            } catch (error) {
                console.error("Failed to add district markers to map:", error);
                // Optionally show a non-blocking warning
            }

            // Pass element IDs and fetched data
            setupSearchHandlers(
                "district-search",
                "search-results",
                // 'info-display', // Optional info display ID if needed by search handlers
                districtsData,
                schoolsData,
            );
        } catch (error) {
            console.error("Failed to initialize search:", error);
            // Optionally display an error message to the user
            const searchContainer = document.querySelector(".search-container");
            if (searchContainer) {
                searchContainer.innerHTML =
                    '<p class="error">Could not load search functionality.</p>';
            }
        }
    }

    // Initialize map and search when the DOM is ready
    document.addEventListener("DOMContentLoaded", () => {
        let mapInstance: L.Map | null = null;
        try {
            mapInstance = initializeMap("map"); // Initialize map first
        } catch (error) {
            console.error("Failed to initialize map:", error);
            const mapContainer = document.getElementById("map");
            if (mapContainer)
                mapContainer.innerHTML =
                    '<p class="error">Could not load map.</p>';
            // Don't proceed if map init fails
            return;
        }
        // Fetch data and then add markers/setup search
        initializeSearch(); // This now also calls addDistrictMarkersToMap
    });
</script>
