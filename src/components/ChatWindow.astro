---
// src/components/ChatWindow.astro
// This component will handle the actual chat interactions and display.

export interface Props {}

// const { processQuery } = Astro.props; // No longer needed

interface Message {
    id: string;
    text: string;
    sender: "user" | "ai" | "system" | "loading" | "error";
}
---

<div class="chat-window-internal-wrapper">
    <div id="message-list" class="message-list">
        <!-- Messages will be dynamically added here by client-side script -->
        <div class="message system-message">
            <p>
                AI Initialized. How can I help you with district policies today?
            </p>
        </div>
    </div>
    <div class="message-input-area">
        <textarea
            id="chat-input"
            placeholder="Ask a question about policies..."
            rows="3"></textarea>
        <button id="send-button">Send</button>
    </div>
    <div id="chat-status" class="chat-status-area" style="display: none;">
        {
            /* Status messages like "AI is typing..." or errors can go here - now hidden by default */
        }
    </div>
</div>

<script>
    console.log("ChatWindow script loaded.");

    // Client-side equivalent type for message sender
    type MessageSender = "user" | "ai" | "system" | "loading" | "error";

    const messageList = document.getElementById("message-list");
    const chatInput = document.getElementById("chat-input");
    const sendButton = document.getElementById("send-button");
    const chatStatus = document.getElementById("chat-status");
    const chatWindowWrapper = document.querySelector(
        ".chat-window-internal-wrapper",
    ); // Need parent for dispatching

    console.log({ messageList, chatInput, sendButton, chatStatus });

    let messageIdCounter = 0;

    // Make addMessageToUI accessible externally (e.g., via the element)
    // Note: Exposing methods directly on elements isn't typical web component pattern,
    // but works for this direct parent-child Astro case for simplicity now.
    // A better way might be the parent finding this element and calling a method,
    // or using a more structured event system/state manager.
    if (chatWindowWrapper) {
        (chatWindowWrapper as any).addMessage = (
            text: string,
            sender: MessageSender, // Use client-side type
            replaceLast = false,
            id = undefined,
        ) => {
            addMessageToUI(text, sender, replaceLast, id);
        };
    }

    function addMessageToUI(
        text: string,
        sender: MessageSender,
        replaceLast = false,
        id = undefined,
    ) {
        // Use client-side type
        console.log(`addMessageToUI called with: "${text}", sender: ${sender}`);
        if (!messageList) {
            console.error("messageList element not found in addMessageToUI");
            return;
        }
        const messageContainer = messageList;
        if (!messageContainer) return;

        let messageId =
            id ||
            `msg-${Date.now()}-${Math.random().toString(36).substring(2, 7)}`;

        if (replaceLast && messageContainer.lastElementChild) {
            // If replaceLast is true, remove the last message element
            messageContainer.removeChild(messageContainer.lastElementChild);
        }

        const messageDiv = document.createElement("div");
        messageDiv.classList.add("message", `${sender}-message`);

        const p = document.createElement("p");
        p.textContent = text;
        messageDiv.appendChild(p);

        messageContainer.appendChild(messageDiv);
        if (messageContainer instanceof HTMLElement) {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }
        messageIdCounter++;
    }

    function handleSendMessage() {
        console.log("handleSendMessage called.");

        if (
            !(chatInput instanceof HTMLTextAreaElement) ||
            !(sendButton instanceof HTMLButtonElement)
        ) {
            console.error("handleSendMessage failed initial checks:", {
                isChatInputTextArea: chatInput instanceof HTMLTextAreaElement,
                isSendButtonButton: sendButton instanceof HTMLButtonElement,
            });
            return;
        }

        const query = chatInput.value.trim();
        console.log(`User query: "${query}"`);
        if (query === "") {
            console.log("Query is empty, exiting handleSendMessage.");
            return;
        }

        addMessageToUI(query, "user");
        chatInput.value = "";

        // Disable input using the exposed method, which parent might also call
        if (
            chatWindowWrapper &&
            typeof (chatWindowWrapper as any).enableInput === "function"
        ) {
            (chatWindowWrapper as any).enableInput(false);
        } else {
            // Fallback if method not attached yet (should not happen in normal flow)
            if (chatInput instanceof HTMLTextAreaElement)
                chatInput.disabled = true;
            if (sendButton instanceof HTMLButtonElement)
                sendButton.disabled = true;
        }

        // Add a loading message directly for user feedback
        // addMessageToUI("Processing query...", "loading"); // Parent will now show this

        const event = new CustomEvent("request-query-process", {
            detail: { query: query },
            bubbles: true,
            composed: true,
        });
        console.log("Dispatching request-query-process event");
        chatWindowWrapper?.dispatchEvent(event);
    }

    if (chatWindowWrapper) {
        (chatWindowWrapper as any).enableInput = (enable = true) => {
            console.log(`Setting input and button enabled state to: ${enable}`);
            if (chatInput instanceof HTMLTextAreaElement) {
                chatInput.disabled = !enable;
            }
            if (sendButton instanceof HTMLButtonElement) {
                sendButton.disabled = !enable;
            }

            if (enable) {
                // No longer managing chatStatus text here, parent does it via addMessage
                if (chatInput instanceof HTMLTextAreaElement) chatInput.focus();
            }
        };
        (chatWindowWrapper as any).showError = (
            message: string = "Sorry, I encountered an error.",
        ) => {
            addMessageToUI(message, "error"); // Use 'error' type
            // Parent will call enableInput separately if needed after error.
            // (chatWindowWrapper as any).enableInput(true);
        };
    }

    if (sendButton && chatInput) {
        console.log("Adding event listeners to send button and chat input.");
        sendButton.addEventListener("click", handleSendMessage);
        chatInput.addEventListener("keypress", (event) => {
            if (event.key === "Enter" && !event.shiftKey) {
                console.log("Enter pressed on chat input.");
                event.preventDefault();
                handleSendMessage();
            }
        });
    } else {
        console.error(
            "Could not add event listeners because sendButton or chatInput is missing.",
        );
    }
</script>

<style>
    /* Apply :global() to message styles to bypass Astro scoping for dynamic elements */
    .chat-window-internal-wrapper {
        display: flex;
        flex-direction: column;
        height: 100%;
        background-color: var(--color-text-light, #ffffff);
    }
    .message-list {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px 10px;
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    /* Styles for dynamically created messages need to be global within this component's context */
    :global(.message) {
        padding: 10px 14px;
        border-radius: 18px;
        max-width: 75%;
        word-wrap: break-word;
        line-height: 1.4;
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.08);
    }
    :global(.message p) {
        margin: 0;
    }

    :global(.user-message) {
        background-color: var(--color-primary, #0b93f6);
        color: var(--color-text-light, white);
        align-self: flex-end;
        /* Keep base rounding from .message */
        border-bottom-right-radius: 4px; /* Less rounded */
    }

    :global(.ai-message) {
        background-color: #e5e5ea;
        color: var(--color-text-body, #000000);
        align-self: flex-start;
        border: none;
        /* Keep base rounding from .message */
        border-bottom-left-radius: 4px; /* Less rounded */
    }

    :global(.system-message) {
        /* System message is usually static, but apply :global for consistency */
        background-color: transparent;
        color: #6c757d;
        font-style: normal;
        font-size: 0.8em;
        text-align: center;
        align-self: center;
        padding: 4px 8px;
        max-width: 90%;
        border-radius: 0;
        border: none;
        box-shadow: none;
    }

    :global(.loading-message) {
        background-color: #f0f0f0; /* Light grey background */
        color: var(--color-text-body, #333);
        font-style: italic;
        text-align: center;
        align-self: center;
        padding: 8px 12px;
        max-width: 80%;
        border-radius: 12px;
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
    }

    :global(.error-message) {
        background-color: #ffebee; /* Light pink/red background */
        color: #c62828; /* Darker red text */
        font-weight: bold;
        text-align: center;
        align-self: center;
        padding: 8px 12px;
        max-width: 80%;
        border-radius: 8px;
        border: 1px solid #ef9a9a; /* Lighter red border */
        box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
    }

    /* Input area styles are scoped normally as they are not dynamically created */
    .message-input-area {
        display: flex;
        padding: 10px;
        border-top: 1px solid var(--color-border-light, #ddd);
        background-color: #f9f9f9;
    }
    .message-input-area textarea {
        flex-grow: 1;
        padding: 8px 10px;
        border: 1px solid var(--color-border-medium, #ccc);
        border-radius: 18px;
        resize: none;
        font-family: inherit;
        font-size: 1rem;
        line-height: 1.4;
        margin-right: 8px;
        background-color: white;
    }
    .message-input-area textarea:focus {
        border-color: var(--color-primary, #007bff);
        outline: none;
        box-shadow: 0 0 0 1px var(--color-primary, #007bff);
    }
    .message-input-area button {
        padding: 0 18px;
        background-color: var(--color-primary, #007bff);
        color: var(--color-text-light, white);
        border: none;
        border-radius: 18px;
        cursor: pointer;
        font-weight: bold;
        font-size: 0.95rem;
    }
    .message-input-area button:hover {
        background-color: var(--color-primary-darker, #0056b3);
    }
    .message-input-area button:disabled {
        background-color: #d1d5db;
        cursor: not-allowed;
    }
    .chat-status-area {
        padding: 4px 10px;
        font-size: 0.85em;
        color: var(--color-text-body, #555);
        min-height: 1.5em;
        text-align: center;
        background-color: #f9f9f9;
    }
</style>
