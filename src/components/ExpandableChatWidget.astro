---
// src/components/ExpandableChatWidget.astro
// This component will manage the collapsed and expanded state of the chat widget.

// Props will be defined here later if needed, e.g., to pass district info or handlers.
interface Props {}

const {} = Astro.props;

import ChatWindow from "./ChatWindow.astro"; // <-- IMPORT ChatWindow

// Mock function to simulate RAG processing
const mockProcessQueryFunction = async (query: string): Promise<string> => {
    console.log(`[Mock] Processing query: "${query}"`);
    return new Promise((resolve) => {
        setTimeout(() => {
            const response = `AI says: You asked about "${query}". This is a mock response.`;
            console.log(`[Mock] Responding with: "${response}"`);
            resolve(response);
        }, 1500);
    });
};

// Later, we might import the actual ChatWindow component
// import ChatWindow from './ChatWindow.astro';
---

<div id="expandable-chat-widget-container">
    <button
        id="chat-widget-toggle"
        aria-label="Toggle chat widget"
        aria-expanded="false"
    >
        <svg
            xmlns="http://www.w3.org/2000/svg"
            class="chat-icon"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            stroke-width="2"
        >
            <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 5.523-4.477 10-10 10S1 17.523 1 12 5.477 2 11 2s10 4.477 10 10z"
            ></path>
        </svg>
    </button>

    <div id="chat-window-expanded" class="hidden">
        <ChatWindow />
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const toggleButton = document.getElementById("chat-widget-toggle");
        const chatWindow = document.getElementById("chat-window-expanded");
        const chatWindowInternalWrapper = chatWindow?.querySelector(
            ".chat-window-internal-wrapper",
        );
        const chatInputForFocus =
            chatWindowInternalWrapper?.querySelector("#chat-input");

        function openChat() {
            if (chatWindow && toggleButton instanceof HTMLButtonElement) {
                chatWindow.classList.remove("hidden");
                toggleButton.setAttribute("aria-expanded", "true");
                if (
                    chatInputForFocus &&
                    chatInputForFocus instanceof HTMLElement
                ) {
                    chatInputForFocus.focus();
                }
            }
        }

        function closeChat() {
            if (chatWindow && toggleButton instanceof HTMLButtonElement) {
                chatWindow.classList.add("hidden");
                toggleButton.setAttribute("aria-expanded", "false");
                toggleButton.focus();
            }
        }

        if (toggleButton && chatWindow) {
            toggleButton.addEventListener("click", () => {
                const isExpanded =
                    toggleButton.getAttribute("aria-expanded") === "true";
                isExpanded ? closeChat() : openChat();
            });
        }

        async function handleQueryRequest(event) {
            if (!(event instanceof CustomEvent) || !chatWindowInternalWrapper)
                return;
            const query = event.detail?.query;
            if (typeof query !== "string") return;

            console.log(`ExpandableChatWidget received query: "${query}"`);

            try {
                const mockProcess = async (q) => {
                    console.log(`[Inline Mock] Processing query: "${q}"`);
                    return new Promise((resolve) => {
                        setTimeout(() => {
                            const response = `AI says: You asked about "${q}". Mocked in handler.`;
                            console.log(
                                `[Inline Mock] Responding with: "${response}"`,
                            );
                            resolve(response);
                        }, 1500);
                    });
                };
                const aiResponse = await mockProcess(query);

                if (
                    typeof chatWindowInternalWrapper.addMessage === "function"
                ) {
                    chatWindowInternalWrapper.addMessage(aiResponse, "ai");
                } else {
                    console.error(
                        "ChatWindow does not have addMessage method exposed.",
                    );
                }
            } catch (error) {
                console.error(
                    "Error processing query in ExpandableChatWidget:",
                    error,
                );
                if (typeof chatWindowInternalWrapper.showError === "function") {
                    chatWindowInternalWrapper.showError(
                        "Sorry, an error occurred in the main widget.",
                    );
                } else {
                    console.error(
                        "ChatWindow does not have showError method exposed.",
                    );
                }
            } finally {
                if (
                    typeof chatWindowInternalWrapper.enableInput === "function"
                ) {
                    chatWindowInternalWrapper.enableInput();
                } else {
                    console.error(
                        "ChatWindow does not have enableInput method exposed.",
                    );
                }
            }
        }

        if (chatWindow) {
            console.log(
                "Adding listener for 'request-query-process' on #chat-window-expanded",
            );
            chatWindow.addEventListener(
                "request-query-process",
                handleQueryRequest,
            );
        }
    });
</script>

<style>
    #expandable-chat-widget-container {
        position: fixed;
        bottom: 20px; /* Corresponds to bottom-5 */
        right: 20px; /* Corresponds to right-5 */
        z-index: 1000;
    }

    #chat-widget-toggle {
        background-color: var(--color-primary);
        color: var(--color-text-light);
        width: 60px; /* Increased size for better visibility */
        height: 60px;
        border-radius: 50%;
        border: none;
        box-shadow:
            0 10px 15px -3px rgba(0, 0, 0, 0.1),
            0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-xl */
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition:
            background-color 0.2s ease-in-out,
            transform 0.15s ease-in-out;
        animation: bounce-once-మిత్ర 1.2s ease-in-out 1s 1; /* Animation name, duration, timing, delay, iteration */
    }

    #chat-widget-toggle:hover {
        background-color: var(--color-primary-darker);
    }

    #chat-widget-toggle:focus {
        outline: 2px solid var(--color-primary);
        outline-offset: 2px;
    }

    .chat-icon {
        width: 32px; /* Corresponds to h-7 w-7 (approx 28px), slightly larger */
        height: 32px;
    }

    #chat-window-expanded {
        position: absolute;
        bottom: calc(100% + 1rem); /* 1rem above the button */
        right: 0;
        width: 320px; /* sm:w-96 is 384px, w-80 is 320px */
        height: 60vh; /* Consistent with Tailwind */
        max-height: 500px; /* Adjusted from 700px for typical chat widget */
        background-color: var(--color-text-light);
        border-radius: 0.5rem; /* rounded-lg */
        box-shadow:
            0 20px 25px -5px rgba(0, 0, 0, 0.1),
            0 10px 10px -5px rgba(0, 0, 0, 0.04); /* shadow-2xl */
        display: flex;
        flex-direction: column;
        overflow: hidden;
        border: 1px solid var(--color-border-light);
    }

    #chat-window-expanded.hidden {
        display: none;
    }

    @keyframes bounce-once-మిత్ర {
        0%,
        100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-12px); /* Bounce height */
        }
    }
</style>
